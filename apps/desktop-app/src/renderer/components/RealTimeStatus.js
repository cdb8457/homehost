const React = require('react');\nconst { useState, useEffect } = React;\nconst signalRClient = require('../services/SignalRClient');\nconst './RealTimeStatus.css';\n\n/**\n * RealTimeStatus Component - Compact real-time status indicator\n * \n * Shows connection status and basic server information in a compact widget\n * that can be embedded in headers, sidebars, or other components.\n */\nfunction RealTimeStatus({ showDetails = true, showServerCount = true, onClick }) {\n  const [connectionStatus, setConnectionStatus] = useState({\n    isConnected: false,\n    isAuthenticated: false,\n    uptime: 0\n  });\n  const [serverCount, setServerCount] = useState(0);\n  const [runningServers, setRunningServers] = useState(0);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  useEffect(() => {\n    const updateConnectionStatus = () => {\n      setConnectionStatus(signalRClient.getConnectionStatus());\n    };\n\n    const handleServerStatusUpdate = (data) => {\n      setServerCount(data.servers.length);\n      setRunningServers(data.servers.filter(s => s.status === 'running').length);\n      setLastUpdate(new Date());\n    };\n\n    const handleConnected = () => {\n      updateConnectionStatus();\n    };\n\n    const handleAuthenticated = () => {\n      updateConnectionStatus();\n      // Request initial status\n      signalRClient.requestServerStatus();\n    };\n\n    const handleDisconnected = () => {\n      updateConnectionStatus();\n    };\n\n    // Add event listeners\n    signalRClient.on('connected', handleConnected);\n    signalRClient.on('authenticated', handleAuthenticated);\n    signalRClient.on('disconnected', handleDisconnected);\n    signalRClient.on('server-status-update', handleServerStatusUpdate);\n\n    // Initial status\n    updateConnectionStatus();\n\n    return () => {\n      // Cleanup listeners\n      signalRClient.removeListener('connected', handleConnected);\n      signalRClient.removeListener('authenticated', handleAuthenticated);\n      signalRClient.removeListener('disconnected', handleDisconnected);\n      signalRClient.removeListener('server-status-update', handleServerStatusUpdate);\n    };\n  }, []);\n\n  const getStatusColor = () => {\n    if (!connectionStatus.isConnected) return 'status-disconnected';\n    if (!connectionStatus.isAuthenticated) return 'status-connecting';\n    return 'status-connected';\n  };\n\n  const getStatusText = () => {\n    if (!connectionStatus.isConnected) return 'Offline';\n    if (!connectionStatus.isAuthenticated) return 'Connecting';\n    return 'Live';\n  };\n\n  const formatUptime = (uptime) => {\n    const seconds = Math.floor(uptime / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m`;\n    return `${seconds}s`;\n  };\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <div \n      className={`real-time-status ${onClick ? 'clickable' : ''}`}\n      onClick={handleClick}\n    >\n      <div className=\"status-indicator\">\n        <div className={`status-dot ${getStatusColor()}`}></div>\n        <span className=\"status-text\">{getStatusText()}</span>\n      </div>\n      \n      {showServerCount && connectionStatus.isAuthenticated && (\n        <div className=\"server-summary\">\n          <span className=\"server-count\">\n            {runningServers}/{serverCount} servers\n          </span>\n          {runningServers > 0 && (\n            <span className=\"running-indicator\">‚óè</span>\n          )}\n        </div>\n      )}\n      \n      {showDetails && connectionStatus.isAuthenticated && (\n        <div className=\"connection-details\">\n          <span className=\"uptime\">\n            {formatUptime(connectionStatus.uptime || 0)}\n          </span>\n          {connectionStatus.metrics?.averageLatency && (\n            <span className=\"latency\">\n              {Math.round(connectionStatus.metrics.averageLatency)}ms\n            </span>\n          )}\n        </div>\n      )}\n      \n      {lastUpdate && (\n        <div className=\"last-update\">\n          {lastUpdate.toLocaleTimeString()}\n        </div>\n      )}\n    </div>\n  );\n}\n\nmodule.exports = RealTimeStatus;
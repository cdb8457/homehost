name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  DOTNET_VERSION: '8.0.x'

jobs:
  # =============================================================================
  # BUILD AND TEST
  # =============================================================================
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm run shared-types:build
    
    - name: Run tests
      run: npm run test -- --ci --coverage --watchAll=false
    
    - name: Run linting
      run: npm run lint
    
    - name: Build web dashboard
      run: npm run web-dashboard:build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: homehost_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore apps/cloud-api/cloud-api.csproj
    
    - name: Build
      run: dotnet build apps/cloud-api/cloud-api.csproj --no-restore
    
    - name: Test
      run: dotnet test apps/cloud-api/cloud-api.csproj --no-build --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=homehost_test;Username=test;Password=test"
        ConnectionStrings__Redis: "localhost:6379"

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # DEPLOYMENT (only on main branch)
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging-dashboard.homehost.io
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build applications
      run: |
        npm ci
        npm run shared-types:build
        npm run web-dashboard:build
        dotnet publish apps/cloud-api/cloud-api.csproj -c Release -o ./publish
    
    - name: Deploy to Azure
      # Azure deployment steps would go here
      run: echo "Deploying to staging environment..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://dashboard.homehost.io
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build applications
      run: |
        npm ci
        npm run shared-types:build
        npm run web-dashboard:build
        dotnet publish apps/cloud-api/cloud-api.csproj -c Release -o ./publish
    
    - name: Deploy to Azure
      # Azure deployment steps would go here
      run: echo "Deploying to production environment..."
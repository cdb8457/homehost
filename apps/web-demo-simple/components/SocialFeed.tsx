'use client';

import { useState, useEffect } from 'react';
import { 
  CommunityPost, 
  PostComment, 
  UserProfile, 
  ActivityFeedItem 
} from '@/types/community';
import { 
  MessageCircle, 
  Heart, 
  Share2, 
  Plus, 
  Image, 
  Video, 
  Camera,
  FileText,
  BarChart3,
  Calendar,
  MapPin,
  Clock,
  Users,
  TrendingUp,
  Flame,
  Star,
  Award,
  Trophy,
  Target,
  Zap,
  Crown,
  Medal,
  Sparkles,
  Eye,
  EyeOff,
  MoreHorizontal,
  Send,
  Smile,
  Hash,
  AtSign,
  Link,
  Bookmark,
  Flag,
  Edit,
  Trash2,
  Copy,
  ExternalLink,
  Download,
  Upload,
  Filter,
  Search,
  SlidersHorizontal,
  RefreshCw,
  ChevronDown,
  ChevronUp,
  X,
  Check,
  AlertCircle,
  Info,
  Play,
  Pause,
  Volume2,
  VolumeX,
  Maximize,
  Minimize,
  RotateCw,
  ZoomIn,
  ZoomOut,
  Grid,
  List,
  Layout,
  Settings,
  Bell,
  BellOff,
  UserPlus,
  UserMinus,
  MessageSquare,
  Reply,
  Forward,
  Archive,
  Pin,
  PinOff,
  Lock,
  Unlock,
  Globe,
  Shield,
  Verified,
  Bot,
  Mic,
  MicOff,
  Headphones,
  Speaker,
  Radio,
  Wifi,
  WifiOff,
  Signal,
  SignalHigh,
  SignalLow,
  SignalZero,
  Battery,
  BatteryLow,
  Power,
  PowerOff,
  Cpu,
  HardDrive,
  MemoryStick,
  Monitor,
  Smartphone,
  Tablet,
  Laptop,
  Desktop,
  Server,
  Database,
  Cloud,
  CloudOff,
  Folder,
  FolderOpen,
  File,
  FileImage,
  FileVideo,
  FileAudio,
  FileCode,
  FilePdf,
  FileSpreadsheet,
  FilePresentation,
  FileArchive,
  FileSearch,
  FileEdit,
  FileCheck,
  FileX,
  FilePlus,
  FileMinus,
  FileUp,
  FileDown,
  FileCopy,
  FileMove,
  FileSync,
  FileWarning,
  FileQuestion,
  FileHeart,
  FileStar,
  FileKey,
  FileLock,
  FileUnlock,
  FileShield,
  FileBadge,
  FileBarChart,
  FileLineChart,
  FilePieChart,
  FileText2,
  FileDigit,
  FileType,
  FileType2,
  FileMusic,
  FileVideo2,
  FileImage2,
  Navigation,
  Navigation2,
  NavigationOff,
  Compass,
  Map,
  MapPin2,
  Route,
  Car,
  Bus,
  Train,
  Plane,
  Ship,
  Bike,
  Walk,
  Run,
  Activity,
  Footprints,
  Mountain,
  TreePine,
  Sun,
  Moon,
  Star as StarIcon,
  CloudSun,
  CloudRain,
  CloudSnow,
  Snowflake,
  Rainbow,
  Umbrella,
  Wind,
  Thermometer,
  Gauge,
  Timer,
  Stopwatch,
  AlarmClock,
  Calendar as CalendarIcon,
  CalendarDays,
  CalendarCheck,
  CalendarX,
  CalendarPlus,
  CalendarMinus,
  CalendarClock,
  CalendarHeart,
  CalendarRange,
  Clock3,
  Clock12,
  ClockAlert,
  History,
  RotateCcw,
  Rewind,
  FastForward,
  SkipBack,
  SkipForward,
  Shuffle,
  Repeat,
  Repeat1,
  PlayCircle,
  PauseCircle,
  StopCircle,
  Square,
  Circle,
  Triangle,
  Hexagon,
  Octagon,
  Diamond,
  Heart as HeartIcon,
  Spade,
  Club,
  Music,
  Music2,
  Music3,
  Music4,
  Headphones as HeadphonesIcon,
  Disc,
  Disc2,
  Disc3,
  Radio as RadioIcon,
  Podcast,
  Antenna,
  Tv,
  Tv2,
  MonitorSpeaker,
  Volume,
  Volume1,
  VolumeOff,
  Megaphone,
  Phone,
  PhoneCall,
  PhoneIncoming,
  PhoneOutgoing,
  PhoneMissed,
  PhoneOff,
  Voicemail,
  Contact,
  Contact2,
  Contacts,
  UserCircle,
  UserCircle2,
  UserSquare,
  UserSquare2,
  User,
  User2,
  UserX,
  UserCheck,
  UserCog,
  Users2 as UsersIcon,
  UserPlus2,
  UserMinus2,
  Team,
  Crown as CrownIcon,
  Shield as ShieldIcon,
  Award as AwardIcon,
  Medal as MedalIcon,
  Trophy as TrophyIcon,
  Target as TargetIcon,
  Crosshair,
  Focus,
  Radar,
  Scan,
  ScanLine,
  QrCode,
  Barcode,
  Hash as HashIcon,
  Binary,
  Code,
  Code2,
  Terminal,
  Command,
  Keyboard,
  Mouse,
  MousePointer,
  MousePointer2,
  MousePointerClick,
  Cursor,
  Move,
  Move3d,
  MoveHorizontal,
  MoveVertical,
  MoveDiagonal,
  MoveDiagonal2,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  ArrowRight,
  ArrowUpLeft,
  ArrowUpRight,
  ArrowDownLeft,
  ArrowDownRight,
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  ChevronsUp,
  ChevronsDown,
  ChevronsUpDown,
  ChevronsLeftRight,
  CornerUpLeft,
  CornerUpRight,
  CornerDownLeft,
  CornerDownRight,
  TrendingDown,
  Equal,
  Plus as PlusIcon,
  Minus,
  Multiply,
  Divide,
  Percent,
  Calculator,
  PieChart,
  BarChart,
  BarChart2,
  BarChart3 as BarChart3Icon,
  BarChart4,
  LineChart,
  AreaChart,
  ScatterChart,
  GitGraph,
  GitBranch,
  GitCommit,
  GitMerge,
  GitPullRequest,
  GitFork,
  Package,
  Package2,
  PackageOpen,
  PackageCheck,
  PackageX,
  PackagePlus,
  PackageMinus,
  PackageSearch,
  Box,
  Boxes,
  Container,
  Truck,
  Warehouse,
  Factory,
  Building,
  Building2,
  Home,
  Hotel,
  School,
  GraduationCap,
  BookOpen,
  Book,
  BookMarked,
  Bookmark as BookmarkIcon,
  Library,
  Newspaper,
  FileText as FileTextIcon,
  Scroll,
  Receipt,
  Invoice,
  CreditCard,
  Banknote,
  Coins,
  Wallet,
  PiggyBank,
  HandCoins,
  DollarSign,
  Euro,
  Pound,
  Yen,
  Ruble,
  IndianRupee,
  Bitcoin,
  ShoppingCart,
  ShoppingBag,
  Store,
  Storefront,
  Tag,
  Tags,
  Ticket,
  Gift,
  GiftCard,
  Percent as PercentIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  Activity as ActivityIcon,
  Zap as ZapIcon,
  Flame as FlameIcon,
  Sparkles as SparklesIcon,
  Star as StarIcon2,
  Starburst,
  Fireworks,
  PartyPopper,
  Confetti,
  Balloon,
  Cake,
  Candle,
  IceCream,
  Coffee,
  Tea,
  Wine,
  Beer,
  Martini,
  Cocktail,
  Milk,
  Baby,
  BabyBottle,
  Utensils,
  UtensilsCrossed,
  ChefHat,
  Cookie,
  Pizza,
  Sandwich,
  Salad,
  Soup,
  Beef,
  Fish,
  Egg,
  EggFried,
  Banana,
  Apple,
  Cherry,
  Grape,
  Orange,
  Lemon,
  Strawberry,
  Carrot,
  Corn,
  Wheat,
  Leaf,
  Seedling,
  TreeDeciduous,
  Flower,
  Flower2,
  Blossom,
  Rose,
  Tulip,
  Sunflower,
  Bug,
  Butterfly,
  Bee,
  Ladybug,
  Worm,
  Snail,
  Spider,
  Ant,
  Fish as FishIcon,
  Turtle,
  Rabbit,
  Squirrel,
  Hedgehog,
  Bird,
  Cat,
  Dog,
  Bone,
  PawPrint,
  Feather,
  Egg as EggIcon,
  Shell,
  Waves,
  Droplets,
  Droplet,
  CloudRain as CloudRainIcon,
  CloudDrizzle,
  CloudLightning,
  CloudSnow as CloudSnowIcon,
  Snowflake as SnowflakeIcon,
  Sun as SunIcon,
  Sunrise,
  Sunset,
  Moon as MoonIcon,
  MoonStar,
  Stars,
  Comet,
  Rocket,
  Satellite,
  Telescope,
  Microscope,
  Atom,
  Dna,
  TestTube,
  TestTubes,
  Flask,
  FlaskConical,
  FlaskRound,
  Beaker,
  Pill,
  Tablets,
  Syringe,
  Stethoscope,
  Thermometer as ThermometerIcon,
  Bandage,
  Cross,
  Heart as HeartIcon2,
  HeartPulse,
  Activity as ActivityIcon2,
  Brain,
  Eye,
  Ear,
  Nose,
  Mouth,
  Hand,
  Handshake,
  ThumbsUp,
  ThumbsDown,
  Peace,
  Victory,
  Fingers,
  Footprints as FootprintsIcon,
  Baby as BabyIcon,
  Accessibility,
  WheelchairMobility,
  Glasses,
  Shirt,
  ShirtOff,
  Hat,
  Crown as CrownIcon2,
  Gem,
  Ring,
  Watch,
  Necklace,
  Footwear,
  Shoe,
  Sock,
  Backpack,
  Luggage,
  Briefcase,
  Handbag,
  Wallet as WalletIcon,
  Key,
  Keys,
  Lock as LockIcon,
  Unlock as UnlockIcon,
  LockKeyhole,
  UnlockKeyhole,
  Shield as ShieldIcon2,
  ShieldCheck,
  ShieldX,
  ShieldAlert,
  ShieldQuestion,
  ShieldBan,
  ShieldOff,
  Security,
  Fingerprint,
  ScanFace,
  UserScan,
  IdCard,
  Passport,
  Ticket as TicketIcon,
  QrCode as QrCodeIcon,
  Barcode as BarcodeIcon,
  ScanLine as ScanLineIcon,
  Scan as ScanIcon,
  Camera as CameraIcon,
  CameraOff,
  Video as VideoIcon,
  VideoOff,
  Image as ImageIcon,
  Images,
  FileImage as FileImageIcon,
  FileVideo as FileVideoIcon,
  Gallery,
  Palette,
  Paintbrush,
  Paintbrush2,
  PaintBucket,
  Pipette,
  Eraser,
  Pen,
  PenTool,
  Pencil,
  Edit2,
  Edit3,
  Highlighter,
  Marker,
  Scissors,
  Ruler,
  Compass as CompassIcon,
  Triangle as TriangleIcon,
  Square as SquareIcon,
  Circle as CircleIcon,
  Pentagon,
  Hexagon as HexagonIcon,
  Octagon as OctagonIcon,
  Star as StarIcon3,
  Heart as HeartIcon3,
  Diamond as DiamondIcon,
  Spade as SpadeIcon,
  Club as ClubIcon,
  Zap as ZapIcon2,
  Flame as FlameIcon2,
  Droplet as DropletIcon,
  Snowflake as SnowflakeIcon2,
  Sun as SunIcon2,
  Moon as MoonIcon2,
  Star as StarIcon4,
  Cloud,
  CloudOff as CloudOffIcon,
  Wind as WindIcon,
  Tornado,
  Umbrella as UmbrellaIcon,
  UmbrellaBeach,
  Tent,
  Camping,
  Caravan,
  Castle,
  Church,
  Landmark,
  Museum,
  Bank,
  University,
  School2,
  Hospital,
  Pharmacy,
  Hotel as HotelIcon,
  Home as HomeIcon,
  Building as BuildingIcon,
  Building2 as Building2Icon,
  Skyscraper,
  Factory as FactoryIcon,
  Warehouse as WarehouseIcon,
  Store as StoreIcon,
  ShoppingMall,
  Stadium,
  Theater,
  Cinema,
  GameController,
  Gamepad2,
  Joystick,
  Dices,
  Puzzle,
  ChessKnight,
  Spades,
  Clubs,
  Hearts,
  Diamonds,
  Dice1,
  Dice2,
  Dice3,
  Dice4,
  Dice5,
  Dice6,
  Card,
  CreditCard as CreditCardIcon,
  Ticket as TicketIcon2,
  Trophy as TrophyIcon2,
  Medal as MedalIcon2,
  Award as AwardIcon2,
  Star as StarIcon5,
  Crown as CrownIcon3,
  Gem as GemIcon,
  Target as TargetIcon2,
  Crosshair as CrosshairIcon,
  Bullseye,
  Dartboard,
  Bow,
  Sword,
  Axe,
  Hammer,
  Wrench,
  Screwdriver,
  Drill,
  Saw,
  Pickaxe,
  Shovel,
  Rake,
  Hoe,
  Scissors as ScissorsIcon,
  Knife,
  ForkKnife,
  Spoon,
  ChopSticks,
  Pot,
  Pan,
  Kettle,
  Teapot,
  CookingPot,
  Oven,
  Microwave,
  Refrigerator,
  Freezer,
  WashingMachine,
  Dishwasher,
  VacuumCleaner,
  Broom,
  Mop,
  Bucket,
  Soap,
  Towel,
  Toilet,
  Shower,
  Bathtub,
  Sink,
  Faucet,
  Toothbrush,
  Razor,
  Comb,
  Brush,
  Mirror,
  Perfume,
  Lipstick,
  Mascara,
  Eyeshadow,
  Foundation,
  Powder,
  Blush,
  Nail,
  NailPolish,
  Spa,
  Massage,
  Sauna,
  HotTub,
  Pool,
  Beach,
  Ocean,
  Lake,
  River,
  Waterfall,
  Island,
  Mountain as MountainIcon,
  Volcano,
  Desert,
  Forest,
  Jungle,
  Meadow,
  Field,
  Farm,
  Barn,
  Tractor,
  Cow,
  Pig,
  Chicken,
  Rooster,
  Sheep,
  Goat,
  Horse,
  Donkey,
  Llama,
  Deer,
  Fox,
  Wolf,
  Bear,
  Lion,
  Tiger,
  Leopard,
  Elephant,
  Rhino,
  Hippo,
  Giraffe,
  Zebra,
  Monkey,
  Gorilla,
  Orangutan,
  Chimpanzee,
  Koala,
  Panda,
  Sloth,
  Kangaroo,
  Platypus,
  Otter,
  Beaver,
  Badger,
  Raccoon,
  Skunk,
  Porcupine,
  Armadillo,
  Anteater,
  Sloth as SlothIcon,
  Bat,
  Eagle,
  Hawk,
  Owl,
  Swan,
  Duck,
  Goose,
  Penguin,
  Flamingo,
  Parrot,
  Toucan,
  Peacock,
  Turkey,
  Dove,
  Crow,
  Raven,
  Robin,
  Sparrow,
  Swallow,
  Hummingbird,
  Woodpecker,
  Pelican,
  Seagull,
  Albatross,
  Crane,
  Stork,
  Heron,
  Ibis,
  Osprey,
  Falcon,
  Kestrel,
  Buzzard,
  Vulture,
  Condor,
  Ostrich,
  Emu,
  Cassowary,
  Kiwi,
  Dinosaur,
  TRex,
  Mammoth,
  Fossil,
  Bone as BoneIcon,
  Skull,
  Ghost,
  Zombie,
  Vampire,
  Witch,
  Wizard,
  Mage,
  Fairy,
  Angel,
  Devil,
  Demon,
  Dragon,
  Unicorn,
  Phoenix,
  Griffin,
  Pegasus,
  Centaur,
  Mermaid,
  Siren,
  Kraken,
  SeaMonster,
  Alien,
  Ufo,
  Spaceship,
  Robot,
  Cyborg,
  Android,
  Droid,
  Ai,
  Brain as BrainIcon,
  Cpu as CpuIcon,
  Microchip,
  MemoryStick as MemoryStickIcon,
  HardDrive as HardDriveIcon,
  Database as DatabaseIcon,
  Server as ServerIcon,
  Cloud as CloudIcon,
  Network,
  Wifi as WifiIcon,
  Bluetooth,
  Nfc,
  Antenna as AntennaIcon,
  Satellite as SatelliteIcon,
  Radar as RadarIcon,
  Gps,
  Compass as CompassIcon2,
  Map as MapIcon,
  Globe as GlobeIcon,
  Earth,
  Moon as MoonIcon3,
  Sun as SunIcon3,
  Planet,
  Orbit,
  Rocket as RocketIcon,
  Shuttle,
  Station,
  Telescope as TelescopeIcon,
  Binoculars,
  Microscope as MicroscopeIcon,
  Magnifier,
  MagnifyingGlass,
  Search as SearchIcon,
  SearchCheck,
  SearchX,
  Filter as FilterIcon,
  FilterCheck,
  FilterX,
  Sort,
  SortAsc,
  SortDesc,
  ArrowUpDown,
  ArrowUpWideNarrow,
  ArrowDownWideNarrow,
  ArrowUpNarrowWide,
  ArrowDownNarrowWide,
  ArrowUp10,
  ArrowDown10,
  ArrowUpAz,
  ArrowDownAz,
  ArrowUpZa,
  ArrowDownZa,
  ArrowUp01,
  ArrowDown01,
  ChevronsUpDown as ChevronsUpDownIcon,
  ChevronsLeftRight as ChevronsLeftRightIcon,
  ExpandHorizontally,
  ExpandVertically,
  ShrinkHorizontally,
  ShrinkVertically,
  Maximize as MaximizeIcon,
  Minimize as MinimizeIcon,
  Maximize2,
  Minimize2,
  Fullscreen,
  FullscreenExit,
  PictureInPicture,
  PictureInPicture2,
  Monitor as MonitorIcon,
  Tv as TvIcon,
  Smartphone as SmartphoneIcon,
  Tablet as TabletIcon,
  Laptop as LaptopIcon,
  Desktop as DesktopIcon,
  Watch as WatchIcon,
  Smartwatch,
  Speaker as SpeakerIcon,
  Headphones as HeadphonesIcon2,
  Earbuds,
  Microphone,
  MicrophoneOff,
  VolumeUp,
  VolumeDown,
  Mute,
  Unmute,
  Play as PlayIcon,
  Pause as PauseIcon,
  Stop,
  Record,
  FastForward as FastForwardIcon,
  Rewind as RewindIcon,
  SkipForward as SkipForwardIcon,
  SkipBack as SkipBackIcon,
  Shuffle as ShuffleIcon,
  Repeat as RepeatIcon,
  Repeat1 as Repeat1Icon,
  Loop,
  Random,
  Equalizer,
  Waveform,
  Radio as RadioIcon2,
  Podcast as PodcastIcon,
  Cd,
  Vinyl,
  Cassette,
  MiniDisc,
  Floppy,
  Usb,
  SdCard,
  MemoryCard,
  Sim,
  EsimCard,
  FlashDrive,
  ExternalDrive,
  InternalDrive,
  OpticalDrive,
  Printer,
  Scanner,
  Fax,
  Copier,
  Shredder,
  Laminator,
  Stapler,
  PaperClip,
  Pushpin,
  Thumbtack,
  PaperPlane,
  Envelope,
  Mail,
  MailOpen,
  MailCheck,
  MailX,
  MailPlus,
  MailMinus,
  MailSearch,
  MailWarning,
  MailQuestion,
  Inbox,
  Outbox,
  Send as SendIcon,
  SendHorizontal,
  Reply as ReplyIcon,
  ReplyAll,
  Forward as ForwardIcon,
  Archive as ArchiveIcon,
  Trash,
  Trash2 as Trash2Icon,
  Delete,
  Restore,
  Recycle,
  Bin,
  Dumpster,
  Folder as FolderIcon,
  FolderOpen as FolderOpenIcon,
  FolderPlus,
  FolderMinus,
  FolderEdit,
  FolderCheck,
  FolderX,
  FolderSearch,
  FolderHeart,
  FolderStar,
  FolderLock,
  FolderKey,
  FolderSync,
  FolderInput,
  FolderOutput,
  FolderUp,
  FolderDown,
  FolderClosed,
  File as FileIcon,
  FilePlus as FilePlusIcon,
  FileMinus as FileMinusIcon,
  FileEdit as FileEditIcon,
  FileCheck as FileCheckIcon,
  FileX as FileXIcon,
  FileSearch as FileSearchIcon,
  FileHeart as FileHeartIcon,
  FileStar as FileStarIcon,
  FileLock as FileLockIcon,
  FileKey as FileKeyIcon,
  FileSync as FileSyncIcon,
  FileInput,
  FileOutput,
  FileUp as FileUpIcon,
  FileDown as FileDownIcon,
  FileCopy as FileCopyIcon,
  FileMove as FileMoveIcon,
  FileQuestion as FileQuestionIcon,
  FileWarning as FileWarningIcon,
  FileDigit as FileDigitIcon,
  FileType as FileTypeIcon,
  FileType2 as FileType2Icon,
  FileText as FileTextIcon2,
  FileImage as FileImageIcon2,
  FileVideo as FileVideoIcon2,
  FileAudio as FileAudioIcon,
  FileMusic as FileMusicIcon,
  FilePdf as FilePdfIcon,
  FileSpreadsheet as FileSpreadsheetIcon,
  FilePresentation as FilePresentationIcon,
  FileCode as FileCodeIcon,
  FileArchive as FileArchiveIcon,
  FileZip,
  FileRar,
  File7z,
  FileTar,
  FileGz,
  FileBz2,
  FileXz,
  FileCab,
  FileIso,
  FileDmg,
  FileExe,
  FileApp,
  FilePkg,
  FileDeb,
  FileRpm,
  FileAppImage,
  FileSnap,
  FileFlatpak,
  FileMsi,
  FileBat,
  FileCmd,
  FilePowerShell,
  FileShell,
  FileBash,
  FileZsh,
  FileFish,
  FilePython,
  FileJavascript,
  FileTypescript,
  FileHtml,
  FileCss,
  FilePhp,
  FileRuby,
  FileGo,
  FileRust,
  FileC,
  FileCpp,
  FileJava,
  FileCsharp,
  FileSwift,
  FileKotlin,
  FileDart,
  FileLua,
  FilePerl,
  FileR,
  FileMatlab,
  FileSql,
  FileJson,
  FileXml,
  FileYaml,
  FileToml,
  FileIni,
  FileConfig,
  FileLog,
  FileMd,
  FileMarkdown,
  FileRst,
  FileTex,
  FileLatex,
  FileDoc,
  FileDocx,
  FileOdt,
  FileRtf,
  FileTxt,
  FileCsv,
  FileXls,
  FileXlsx,
  FileOds,
  FilePpt,
  FilePptx,
  FileOdp,
  FileJpg,
  FileJpeg,
  FilePng,
  FileGif,
  FileBmp,
  FileTiff,
  FileWebp,
  FileSvg,
  FileIco,
  FilePsd,
  FileAi,
  FileEps,
  FileMp3,
  FileMp4,
  FileAvi,
  FileMov,
  FileWmv,
  FileFlv,
  FileMkv,
  FileWebm,
  FileM4v,
  File3gp,
  FileOgg,
  FileFlac,
  FileWav,
  FileAac,
  FileM4a,
  FileWma,
  FileAmr,
  FileFont,
  FileTtf,
  FileOtf,
  FileWoff,
  FileWoff2,
  FileEot,
  New,
  NewFile,
  NewFolder,
  NewTab,
  NewWindow,
  Open,
  OpenFile,
  OpenFolder,
  OpenTab,
  OpenWindow,
  Save,
  SaveAs,
  SaveAll,
  Export,
  Import,
  Upload as UploadIcon,
  Download as DownloadIcon,
  Share as ShareIcon,
  Share2 as Share2Icon,
  Link as LinkIcon,
  Unlink,
  ChainLink,
  Paperclip,
  AttachFile,
  Attach,
  Detach,
  Connect,
  Disconnect,
  Plugin,
  Power as PowerIcon,
  PowerOff as PowerOffIcon,
  Restart,
  Sleep,
  Hibernate,
  Suspend,
  Shutdown,
  Reboot,
  Reset,
  Refresh,
  Reload,
  Update,
  Upgrade,
  Sync,
  Backup,
  Restore as RestoreIcon,
  Clone,
  Duplicate,
  Copy as CopyIcon,
  Cut,
  Paste,
  Undo,
  Redo,
  Cancel,
  Close,
  Exit,
  Quit,
  Escape,
  Back,
  Next,
  Previous,
  Continue,
  Finish,
  Done,
  Complete,
  Submit,
  Confirm,
  Accept,
  Approve,
  Reject,
  Decline,
  Deny,
  Block,
  Unblock,
  Ban,
  Unban,
  Mute as MuteIcon,
  Unmute as UnmuteIcon,
  Hide,
  Show,
  Visible,
  Invisible,
  Public,
  Private,
  Secret,
  Confidential,
  Classified,
  TopSecret,
  Restricted,
  Unrestricted,
  Limited,
  Unlimited,
  Free,
  Paid,
  Premium,
  Pro,
  VIP,
  Gold,
  Silver,
  Bronze,
  Platinum,
  Diamond as DiamondIcon2,
  Ruby,
  Emerald,
  Sapphire,
  Pearl,
  Crystal,
  Jewel,
  Treasure,
  Chest,
  Safe,
  Vault,
  Bank as BankIcon,
  ATM,
  CashRegister,
  Till,
  Cashier,
  Receipt as ReceiptIcon,
  Invoice as InvoiceIcon,
  Bill,
  Statement,
  Report,
  Document,
  Paper,
  Note,
  Memo,
  Letter,
  Message,
  Notification,
  Alert,
  Warning,
  Error,
  Info as InfoIcon,
  Question,
  Help,
  Support,
  FAQ,
  Guide,
  Tutorial,
  Manual,
  Documentation,
  Wiki,
  Blog,
  News,
  Article,
  Post,
  Comment,
  Review,
  Rating,
  Feedback,
  Survey,
  Poll,
  Vote,
  Election,
  Ballot,
  Campaign,
  Politics,
  Government,
  Law,
  Legal,
  Justice,
  Court,
  Judge,
  Lawyer,
  Attorney,
  Contract,
  Agreement,
  Terms,
  Conditions,
  Policy,
  Privacy,
  Security as SecurityIcon,
  Safety,
  Protection,
  Insurance,
  Warranty,
  Guarantee,
  Certified,
  Verified as VerifiedIcon,
  Authenticated,
  Authorized,
  Licensed,
  Registered,
  Trademarked,
  Copyrighted,
  Patented,
  Intellectual,
  Property,
  Rights,
  Ownership,
  Possession,
  Asset,
  Equity,
  Investment,
  Portfolio,
  Stock,
  Share,
  Bond,
  Fund,
  ETF,
  Mutual,
  Index,
  Commodity,
  Forex,
  Crypto,
  Bitcoin as BitcoinIcon,
  Ethereum,
  Blockchain,
  Mining,
  Wallet as WalletIcon2,
  Exchange,
  Trading,
  Broker,
  Market,
  Finance,
  Economy,
  Business,
  Company,
  Corporation,
  Enterprise,
  Startup,
  Entrepreneur,
  Investor,
  Venture,
  Capital,
  Funding,
  Revenue,
  Profit,
  Loss,
  Growth,
  Decline,
  Success,
  Failure,
  Achievement,
  Goal,
  Objective,
  Target,
  Mission,
  Vision,
  Strategy,
  Plan,
  Project,
  Task,
  Todo,
  Checklist,
  Progress,
  Status,
  Update as UpdateIcon,
  Milestone,
  Deadline,
  Schedule,
  Timeline,
  Calendar as CalendarIcon2,
  Event,
  Meeting,
  Appointment,
  Reminder,
  Alarm,
  Timer as TimerIcon,
  Stopwatch as StopwatchIcon,
  Clock as ClockIcon,
  Time,
  Duration,
  Period,
  Interval,
  Frequency,
  Rate,
  Speed,
  Velocity,
  Acceleration,
  Deceleration,
  Distance,
  Length,
  Width,
  Height,
  Depth,
  Area,
  Volume,
  Weight,
  Mass,
  Density,
  Temperature,
  Pressure,
  Force,
  Energy,
  Power,
  Voltage,
  Current,
  Resistance,
  Capacity,
  Frequency as FrequencyIcon,
  Wavelength,
  Amplitude,
  Phase,
  Signal as SignalIcon,
  Noise,
  Quality,
  Clarity,
  Resolution,
  Definition,
  Detail,
  Precision,
  Accuracy,
  Tolerance,
  Margin,
  Range,
  Limit,
  Boundary,
  Border,
  Edge,
  Corner,
  Center,
  Middle,
  Top,
  Bottom,
  Left,
  Right,
  Front,
  Back,
  Side,
  Inside,
  Outside,
  Above,
  Below,
  Beside,
  Between,
  Among,
  Around,
  Through,
  Across,
  Along,
  Against,
  Towards,
  Away,
  Near,
  Far,
  Close,
  Distant,
  Local,
  Remote,
  Online,
  Offline,
  Connected,
  Disconnected,
  Available,
  Unavailable,
  Active,
  Inactive,
  Enabled,
  Disabled,
  On,
  Off,
  Open as OpenIcon,
  Closed,
  Locked,
  Unlocked,
  Secure,
  Insecure,
  Safe as SafeIcon,
  Unsafe,
  Stable,
  Unstable,
  Reliable,
  Unreliable,
  Consistent,
  Inconsistent,
  Regular,
  Irregular,
  Normal,
  Abnormal,
  Standard,
  Custom,
  Default,
  Alternative,
  Optional,
  Required,
  Mandatory,
  Voluntary,
  Automatic,
  Manual,
  Programmed,
  Scheduled,
  Planned,
  Unplanned,
  Expected,
  Unexpected,
  Known,
  Unknown,
  Familiar,
  Unfamiliar,
  Simple,
  Complex,
  Easy,
  Hard,
  Difficult,
  Challenging,
  Basic,
  Advanced,
  Beginner,
  Intermediate,
  Expert,
  Professional,
  Amateur,
  Student,
  Teacher,
  Instructor,
  Professor,
  Scholar,
  Researcher,
  Scientist,
  Engineer,
  Developer,
  Programmer,
  Designer,
  Artist,
  Creator,
  Author,
  Writer,
  Editor,
  Publisher,
  Producer,
  Director,
  Manager,
  Leader,
  Boss,
  CEO,
  CTO,
  CFO,
  COO,
  VP,
  President,
  Chairman,
  Founder,
  Owner,
  Partner,
  Investor as InvestorIcon,
  Shareholder,
  Stakeholder,
  Customer,
  Client,
  User as UserIcon,
  Member,
  Subscriber,
  Follower,
  Fan,
  Supporter,
  Advocate,
  Ambassador,
  Representative,
  Agent,
  Delegate,
  Spokesperson,
  Presenter,
  Speaker,
  Host,
  Guest,
  Visitor,
  Tourist,
  Traveler,
  Explorer,
  Adventurer,
  Pioneer,
  Innovator,
  Inventor,
  Creator as CreatorIcon,
  Builder,
  Maker,
  Craftsman,
  Artisan,
  Expert as ExpertIcon,
  Specialist,
  Consultant,
  Advisor,
  Mentor,
  Coach,
  Trainer,
  Guide as GuideIcon,
  Helper,
  Assistant,
  Support as SupportIcon,
  Service,
  Care,
  Maintenance,
  Repair,
  Fix,
  Troubleshoot,
  Debug,
  Test,
  Validate,
  Verify,
  Check as CheckIcon,
  Inspect,
  Examine,
  Analyze,
  Evaluate,
  Assess,
  Measure,
  Calculate,
  Compute,
  Process,
  Execute,
  Run,
  Start,
  Begin,
  Initialize,
  Launch,
  Deploy,
  Install,
  Setup,
  Configure,
  Customize,
  Personalize,
  Optimize,
  Improve,
  Enhance,
  Upgrade as UpgradeIcon,
  Update as UpdateIcon2,
  Modify,
  Change,
  Adjust,
  Tune,
  Calibrate,
  Balance,
  Align,
  Synchronize,
  Coordinate,
  Organize,
  Arrange,
  Order,
  Sort as SortIcon,
  Group,
  Classify,
  Categorize,
  Label,
  Tag as TagIcon,
  Mark,
  Highlight,
  Emphasize,
  Focus as FocusIcon,
  Attention,
  Notice,
  Observe,
  Watch,
  Monitor,
  Track,
  Follow,
  Trace,
  Record,
  Log,
  Register,
  Document as DocumentIcon,
  Note as NoteIcon,
  Memo as MemoIcon,
  Reminder as ReminderIcon,
  Comment as CommentIcon,
  Annotation,
  Explanation,
  Description,
  Definition,
  Specification,
  Requirement,
  Condition,
  Rule,
  Regulation,
  Standard as StandardIcon,
  Guideline,
  Principle,
  Policy as PolicyIcon,
  Procedure,
  Protocol,
  Method,
  Technique,
  Approach,
  Strategy as StrategyIcon,
  Tactic,
  Solution,
  Answer,
  Response,
  Reaction,
  Action,
  Operation,
  Function,
  Feature,
  Capability,
  Ability,
  Skill,
  Talent,
  Gift,
  Strength,
  Weakness,
  Advantage,
  Disadvantage,
  Benefit,
  Drawback,
  Positive,
  Negative,
  Good,
  Bad,
  Better,
  Worse,
  Best,
  Worst,
  Perfect,
  Imperfect,
  Complete,
  Incomplete,
  Finished,
  Unfinished,
  Ready,
  Unready,
  Prepared,
  Unprepared,
  Organized,
  Disorganized,
  Clean,
  Dirty,
  Clear,
  Unclear,
  Obvious,
  Hidden,
  Visible as VisibleIcon,
  Invisible as InvisibleIcon,
  Transparent,
  Opaque,
  Bright,
  Dark,
  Light,
  Heavy,
  Thick,
  Thin,
  Wide,
  Narrow,
  Large,
  Small,
  Big,
  Little,
  Huge,
  Tiny,
  Giant,
  Miniature,
  Maximum,
  Minimum,
  More,
  Less,
  Most,
  Least,
  All,
  None,
  Some,
  Few,
  Many,
  Several,
  Multiple,
  Single,
  Double,
  Triple,
  Quadruple,
  Half,
  Quarter,
  Third,
  Eighth,
  Tenth,
  Hundredth,
  Thousandth,
  Million,
  Billion,
  Trillion,
  Infinite,
  Zero,
  One,
  Two,
  Three,
  Four,
  Five,
  Six,
  Seven,
  Eight,
  Nine,
  Ten,
  Eleven,
  Twelve,
  Thirteen,
  Fourteen,
  Fifteen,
  Sixteen,
  Seventeen,
  Eighteen,
  Nineteen,
  Twenty,
  Thirty,
  Forty,
  Fifty,
  Sixty,
  Seventy,
  Eighty,
  Ninety,
  Hundred,
  Thousand,
  First,
  Second,
  Third as ThirdIcon,
  Fourth,
  Fifth,
  Sixth,
  Seventh,
  Eighth as EighthIcon,
  Ninth,
  Tenth as TenthIcon,
  Last,
  Final,
  Ultimate,
  Primary,
  Secondary,
  Tertiary,
  Main,
  Sub,
  Major,
  Minor,
  Important,
  Unimportant,
  Significant,
  Insignificant,
  Relevant,
  Irrelevant,
  Useful,
  Useless,
  Valuable,
  Worthless,
  Precious,
  Cheap,
  Expensive,
  Affordable,
  Costly,
  Priceless,
  Free as FreeIcon,
  Paid as PaidIcon,
  Premium as PremiumIcon,
  Basic as BasicIcon,
  Standard as StandardIcon2,
  Advanced as AdvancedIcon,
  Professional as ProfessionalIcon,
  Enterprise as EnterpriseIcon,
  Personal,
  Business as BusinessIcon,
  Commercial,
  Industrial,
  Educational,
  Academic,
  Scientific,
  Medical,
  Healthcare,
  Legal as LegalIcon,
  Financial,
  Technical,
  Creative,
  Artistic,
  Cultural,
  Social,
  Political,
  Religious,
  Spiritual,
  Philosophical,
  Psychological,
  Physical,
  Mental,
  Emotional,
  Intellectual,
  Rational,
  Logical,
  Practical,
  Theoretical,
  Abstract,
  Concrete,
  Real,
  Virtual,
  Digital,
  Analog,
  Electronic,
  Mechanical,
  Electrical,
  Chemical,
  Biological,
  Organic,
  Inorganic,
  Natural,
  Artificial,
  Synthetic,
  Genuine,
  Fake,
  Authentic,
  Original,
  Copy,
  Duplicate as DuplicateIcon,
  Replica,
  Imitation,
  Simulation,
  Model,
  Prototype,
  Template,
  Pattern,
  Design,
  Style,
  Format,
  Layout as LayoutIcon,
  Structure,
  Framework,
  System,
  Platform,
  Network as NetworkIcon,
  Grid as GridIcon,
  Matrix,
  Array,
  List as ListIcon,
  Table,
  Chart,
  Graph,
  Diagram,
  Map as MapIcon2,
  Plan as PlanIcon,
  Blueprint,
  Scheme,
  Outline,
  Summary,
  Overview,
  Preview,
  Review as ReviewIcon,
  Analysis,
  Report as ReportIcon,
  Study,
  Research,
  Investigation,
  Inquiry,
  Survey as SurveyIcon,
  Poll as PollIcon,
  Questionnaire,
  Interview,
  Discussion,
  Debate,
  Argument,
  Conversation,
  Chat,
  Talk,
  Speech,
  Presentation,
  Lecture,
  Seminar,
  Workshop,
  Conference,
  Meeting as MeetingIcon,
  Assembly,
  Gathering,
  Event as EventIcon,
  Occasion,
  Ceremony,
  Celebration,
  Party,
  Festival,
  Holiday,
  Vacation,
  Break,
  Rest,
  Pause as PauseIcon2,
  Stop as StopIcon,
  Wait,
  Delay,
  Postpone,
  Cancel as CancelIcon,
  Abort,
  Terminate,
  End,
  Finish as FinishIcon,
  Complete as CompleteIcon,
  Conclude,
  Close as CloseIcon,
  Shut,
  Seal,
  Lock as LockIcon2,
  Secure as SecureIcon,
  Protect,
  Guard,
  Defend,
  Shield as ShieldIcon3,
  Cover,
  Hide as HideIcon,
  Conceal,
  Mask,
  Disguise,
  Camouflage,
  Stealth,
  Invisible as InvisibleIcon2,
  Transparent as TransparentIcon,
  Clear as ClearIcon,
  Obvious as ObviousIcon,
  Visible as VisibleIcon2,
  Apparent,
  Evident,
  Manifest,
  Plain,
  Simple as SimpleIcon,
  Easy as EasyIcon,
  Difficult as DifficultIcon,
  Hard as HardIcon,
  Tough,
  Challenging as ChallengingIcon,
  Complex as ComplexIcon,
  Complicated,
  Sophisticated,
  Advanced as AdvancedIcon2,
  Expert as ExpertIcon2,
  Professional as ProfessionalIcon2,
  Skilled,
  Talented,
  Gifted,
  Capable,
  Able,
  Competent,
  Qualified,
  Experienced,
  Veteran,
  Senior,
  Junior,
  Novice,
  Beginner as BeginnerIcon,
  Amateur as AmateurIcon,
  Student as StudentIcon,
  Learner,
  Trainee,
  Apprentice,
  Intern,
  Graduate,
  Alumni,
  Scholar as ScholarIcon,
  Researcher as ResearcherIcon,
  Scientist as ScientistIcon,
  Professor as ProfessorIcon,
  Teacher as TeacherIcon,
  Instructor as InstructorIcon,
  Educator,
  Tutor,
  Mentor as MentorIcon,
  Coach as CoachIcon,
  Trainer as TrainerIcon,
  Guide as GuideIcon2,
  Leader as LeaderIcon,
  Manager as ManagerIcon,
  Supervisor,
  Director as DirectorIcon,
  Executive,
  Administrator,
  Coordinator,
  Organizer,
  Planner,
  Scheduler,
  Controller,
  Operator,
  Technician,
  Specialist as SpecialistIcon,
  Expert as ExpertIcon3,
  Consultant as ConsultantIcon,
  Advisor as AdvisorIcon,
  Counselor,
  Therapist,
  Doctor,
  Nurse,
  Surgeon,
  Dentist,
  Veterinarian,
  Pharmacist,
  Lawyer as LawyerIcon,
  Attorney as AttorneyIcon,
  Judge as JudgeIcon,
  Paralegal,
  Accountant,
  Auditor,
  Bookkeeper,
  Banker,
  Teller,
  Broker as BrokerIcon,
  Agent as AgentIcon,
  Realtor,
  Salesperson,
  Cashier as CashierIcon,
  Clerk,
  Receptionist,
  Secretary,
  Assistant as AssistantIcon,
  Administrator as AdministratorIcon,
  Coordinator as CoordinatorIcon,
  Organizer as OrganizerIcon,
  Planner as PlannerIcon,
  Scheduler as SchedulerIcon,
  Manager as ManagerIcon2,
  Supervisor as SupervisorIcon,
  Director as DirectorIcon2,
  Executive as ExecutiveIcon,
  CEO as CEOIcon,
  President as PresidentIcon,
  VicePresident,
  Chairman as ChairmanIcon,
  BoardMember,
  Shareholder as ShareholderIcon,
  Stakeholder as StakeholderIcon,
  Investor as InvestorIcon2,
  Partner as PartnerIcon,
  Owner as OwnerIcon,
  Founder as FounderIcon,
  Entrepreneur as EntrepreneurIcon,
  Startup as StartupIcon,
  Business as BusinessIcon2,
  Company as CompanyIcon,
  Corporation as CorporationIcon,
  Enterprise as EnterpriseIcon2,
  Organization,
  Institution,
  Association,
  Society,
  Club,
  Group as GroupIcon,
  Team as TeamIcon,
  Crew,
  Squad,
  Unit,
  Division,
  Department,
  Section,
  Branch,
  Office,
  Bureau,
  Agency,
  Authority,
  Commission,
  Committee,
  Board,
  Council,
  Assembly as AssemblyIcon,
  Parliament,
  Congress,
  Senate,
  House,
  Chamber,
  Court as CourtIcon,
  Tribunal,
  Jury,
  Panel,
  Committee as CommitteeIcon,
  Board as BoardIcon,
  Council as CouncilIcon,
  Assembly as AssemblyIcon2,
  Meeting as MeetingIcon2,
  Conference as ConferenceIcon,
  Summit,
  Forum,
  Symposium,
  Convention,
  Expo,
  Fair,
  Exhibition,
  Show,
  Display,
  Demonstration,
  Presentation as PresentationIcon,
  Performance,
  Concert,
  Show as ShowIcon,
  Play as PlayIcon2,
  Drama,
  Theater as TheaterIcon,
  Cinema as CinemaIcon,
  Movie,
  Film,
  Video as VideoIcon2,
  Documentary,
  Series,
  Episode,
  Season,
  Channel,
  Program,
  Broadcast,
  Transmission,
  Stream,
  Live,
  Recording,
  Podcast as PodcastIcon2,
  Radio as RadioIcon3,
  Music as MusicIcon,
  Song,
  Album,
  Track,
  Playlist,
  Artist,
  Musician,
  Singer,
  Band,
  Orchestra,
  Choir,
  Conductor,
  Composer,
  Producer as ProducerIcon,
  Engineer as EngineerIcon,
  Technician as TechnicianIcon,
  Editor as EditorIcon,
  Mixer,
  DJ,
  MC,
  Host as HostIcon,
  Presenter as PresenterIcon,
  Announcer,
  Commentator,
  Reporter,
  Journalist,
  Writer as WriterIcon,
  Author as AuthorIcon,
  Poet,
  Novelist,
  Playwright,
  Screenwriter,
  Columnist,
  Blogger,
  Editor as EditorIcon2,
  Publisher as PublisherIcon,
  Agent as AgentIcon2,
  Manager as ManagerIcon3,
  Publicist,
  Marketer,
  Advertiser,
  Promoter,
  Sponsor,
  Supporter as SupporterIcon,
  Fan as FanIcon,
  Follower as FollowerIcon,
  Subscriber as SubscriberIcon,
  Member as MemberIcon,
  User as UserIcon2,
  Customer as CustomerIcon,
  Client as ClientIcon,
  Buyer,
  Purchaser,
  Consumer,
  Shopper,
  Visitor as VisitorIcon,
  Guest as GuestIcon,
  Tourist as TouristIcon,
  Traveler as TravelerIcon,
  Passenger,
  Driver,
  Pilot,
  Captain,
  Sailor,
  Navigator,
  Explorer as ExplorerIcon,
  Adventurer as AdventurerIcon,
  Pioneer as PioneerIcon,
  Discoverer,
  Inventor as InventorIcon,
  Creator as CreatorIcon2,
  Innovator as InnovatorIcon,
  Developer as DeveloperIcon,
  Programmer as ProgrammerIcon,
  Coder,
  Engineer as EngineerIcon2,
  Architect,
  Designer as DesignerIcon,
  Artist as ArtistIcon,
  Illustrator,
  Photographer,
  Videographer,
  Filmmaker,
  Director as DirectorIcon3,
  Producer as ProducerIcon2,
  Editor as EditorIcon3,
  Animator,
  Modeler,
  Sculptor,
  Painter,
  Drawer,
  Sketcher,
  Craftsman as CraftsmanIcon,
  Artisan as ArtisanIcon,
  Maker as MakerIcon,
  Builder as BuilderIcon,
  Constructor,
  Contractor,
  Carpenter,
  Plumber,
  Electrician,
  Mechanic,
  Technician as TechnicianIcon2,
  Repairman,
  Maintenance as MaintenanceIcon,
  Janitor,
  Cleaner,
  Housekeeper,
  Gardener,
  Landscaper,
  Farmer,
  Rancher,
  Fisherman,
  Hunter,
  Cook,
  Chef,
  Baker,
  Butcher,
  Waiter,
  Waitress,
  Server,
  Bartender,
  Barista,
  Delivery,
  Courier,
  Postman,
  Mailman,
  Driver as DriverIcon,
  Chauffeur,
  Taxi,
  Uber,
  Lyft,
  Bus as BusIcon,
  Train as TrainIcon,
  Subway,
  Metro,
  Tram,
  Trolley,
  Cable,
  Gondola,
  Ferry,
  Boat,
  Ship as ShipIcon,
  Yacht,
  Cruise,
  Sailboat,
  Speedboat,
  Jet,
  Helicopter,
  Plane as PlaneIcon,
  Aircraft,
  Rocket as RocketIcon2,
  Spaceship as SpaceshipIcon,
  UFO,
  Satellite as SatelliteIcon2,
  Space,
  Universe,
  Galaxy,
  Star as StarIcon6,
  Planet as PlanetIcon,
  Moon as MoonIcon4,
  Sun as SunIcon4,
  Earth as EarthIcon,
  Mars,
  Jupiter,
  Saturn,
  Uranus,
  Neptune,
  Pluto,
  Asteroid,
  Comet as CometIcon,
  Meteor,
  BlackHole,
  Nebula,
  Constellation,
  Orbit as OrbitIcon,
  Gravity,
  Atmosphere,
  Oxygen,
  Hydrogen,
  Helium,
  Carbon,
  Nitrogen,
  Element,
  Atom as AtomIcon,
  Molecule,
  Particle,
  Electron,
  Proton,
  Neutron,
  Nucleus,
  Energy as EnergyIcon,
  Force as ForceIcon,
  Motion,
  Speed as SpeedIcon,
  Velocity as VelocityIcon,
  Acceleration as AccelerationIcon,
  Gravity as GravityIcon,
  Friction,
  Pressure as PressureIcon,
  Temperature as TemperatureIcon,
  Heat,
  Cold,
  Fire,
  Ice,
  Water,
  Steam,
  Gas,
  Liquid,
  Solid,
  Plasma,
  Matter,
  Mass as MassIcon,
  Weight as WeightIcon,
  Density as DensityIcon,
  Volume as VolumeIcon,
  Area as AreaIcon,
  Length as LengthIcon,
  Width as WidthIcon,
  Height as HeightIcon,
  Depth as DepthIcon,
  Distance as DistanceIcon,
  Radius,
  Diameter,
  Circumference,
  Perimeter,
  Surface,
  Edge as EdgeIcon,
  Corner as CornerIcon,
  Angle,
  Curve,
  Line,
  Point,
  Dot,
  Pixel,
  Inch,
  Foot,
  Yard,
  Mile,
  Millimeter,
  Centimeter,
  Meter,
  Kilometer,
  Gram,
  Kilogram,
  Pound,
  Ounce,
  Ton,
  Liter,
  Gallon,
  Quart,
  Pint,
  Cup,
  Tablespoon,
  Teaspoon,
  Celsius,
  Fahrenheit,
  Kelvin,
  Second,
  Minute,
  Hour,
  Day,
  Week,
  Month,
  Year,
  Decade,
  Century,
  Millennium,
  Era,
  Age,
  Period as PeriodIcon,
  Epoch,
  Past,
  Present,
  Future,
  History,
  Ancient,
  Modern,
  Contemporary,
  Recent,
  Current,
  Latest,
  Newest,
  Oldest,
  Young,
  Old,
  New,
  Fresh,
  Vintage,
  Classic,
  Traditional,
  Conventional,
  Modern as ModernIcon,
  Contemporary as ContemporaryIcon,
  Innovative,
  Revolutionary,
  Cutting,
  Leading,
  Trending,
  Popular,
  Famous,
  Renowned,
  Celebrated,
  Notable,
  Distinguished,
  Outstanding,
  Excellent,
  Superior,
  Premium as PremiumIcon2,
  Luxury,
  Deluxe,
  First,
  Top,
  Best as BestIcon,
  Finest,
  Greatest,
  Highest,
  Supreme,
  Ultimate as UltimateIcon,
  Perfect as PerfectIcon,
  Ideal,
  Optimal,
  Maximum as MaximumIcon,
  Peak,
  Summit as SummitIcon,
  Apex,
  Pinnacle,
  Crown as CrownIcon4,
  Champion,
  Winner,
  Victory as VictoryIcon,
  Success as SuccessIcon,
  Achievement as AchievementIcon,
  Accomplishment,
  Triumph,
  Conquest,
  Mastery,
  Excellence,
  Perfection,
  Quality as QualityIcon,
  Standard as StandardIcon3,
  Grade,
  Level,
  Tier,
  Rank,
  Position,
  Place,
  Spot,
  Location,
  Site,
  Venue,
  Destination,
  Address,
  Coordinates,
  GPS,
  Navigation as NavigationIcon,
  Direction,
  Route as RouteIcon,
  Path,
  Trail,
  Road,
  Street,
  Avenue,
  Boulevard,
  Highway,
  Freeway,
  Interstate,
  Bridge,
  Tunnel,
  Intersection,
  Junction,
  Roundabout,
  Exit,
  Entrance,
  Gateway,
  Door,
  Window,
  Opening,
  Hole,
  Gap,
  Space as SpaceIcon,
  Room,
  Area as AreaIcon2,
  Zone,
  Region,
  Territory,
  District,
  Neighborhood,
  Community,
  City,
  Town,
  Village,
  County,
  State,
  Province,
  Country,
  Nation,
  Continent,
  World,
  Globe as GlobeIcon2,
  Map as MapIcon3,
  Atlas,
  Chart as ChartIcon,
  Diagram as DiagramIcon,
  Graph as GraphIcon,
  Plot,
  Grid as GridIcon2,
  Table as TableIcon,
  List as ListIcon2,
  Menu,
  Options,
  Settings as SettingsIcon,
  Preferences,
  Configuration,
  Setup as SetupIcon,
  Installation,
  Deployment,
  Launch as LaunchIcon,
  Start as StartIcon,
  Begin as BeginIcon,
  Initialize as InitializeIcon,
  Load,
  Import as ImportIcon,
  Export as ExportIcon,
  Upload as UploadIcon2,
  Download as DownloadIcon2,
  Transfer,
  Move as MoveIcon,
  Copy as CopyIcon2,
  Cut as CutIcon,
  Paste as PasteIcon,
  Duplicate as DuplicateIcon2,
  Clone as CloneIcon,
  Backup as BackupIcon,
  Restore as RestoreIcon2,
  Save as SaveIcon,
  Load as LoadIcon,
  Open as OpenIcon2,
  Close as CloseIcon2,
  Exit as ExitIcon,
  Quit as QuitIcon,
  Cancel as CancelIcon2,
  Abort as AbortIcon,
  Stop as StopIcon2,
  Pause as PauseIcon3,
  Resume,
  Continue as ContinueIcon,
  Proceed,
  Advance,
  Progress as ProgressIcon,
  Forward as ForwardIcon2,
  Back as BackIcon,
  Previous as PreviousIcon,
  Next as NextIcon,
  Skip,
  Jump,
  Go,
  Come,
  Return,
  Revert,
  Reverse,
  Undo as UndoIcon,
  Redo as RedoIcon,
  Refresh as RefreshIcon,
  Reload as ReloadIcon,
  Update as UpdateIcon3,
  Upgrade as UpgradeIcon2,
  Install as InstallIcon,
  Uninstall,
  Remove,
  Delete as DeleteIcon,
  Clear as ClearIcon2,
  Clean,
  Purge,
  Empty,
  Void,
  Null,
  None as NoneIcon,
  Nothing,
  Zero as ZeroIcon,
  Blank,
  Empty as EmptyIcon,
  Full,
  Complete as CompleteIcon2,
  Partial,
  Half as HalfIcon,
  Quarter as QuarterIcon,
  Third as ThirdIcon2,
  All as AllIcon,
  Everything,
  Total,
  Sum,
  Amount,
  Quantity,
  Number,
  Count,
  Measure,
  Unit,
  Scale,
  Size,
  Dimension,
  Proportion,
  Ratio,
  Percentage,
  Fraction,
  Decimal,
  Integer,
  Float,
  Double,
  Long,
  Short,
  Byte,
  Bit,
  Kilobyte,
  Megabyte,
  Gigabyte,
  Terabyte,
  Petabyte,
  Exabyte,
  Zettabyte,
  Yottabyte,
  Hertz,
  Kilohertz,
  Megahertz,
  Gigahertz,
  Terahertz,
  Pixel as PixelIcon,
  Resolution as ResolutionIcon,
  Definition as DefinitionIcon,
  Quality as QualityIcon2,
  Clarity as ClarityIcon,
  Sharpness,
  Brightness as BrightnessIcon,
  Contrast as ContrastIcon,
  Saturation as SaturationIcon,
  Hue as HueIcon,
  Color,
  Red,
  Green,
  Blue,
  Yellow,
  Orange,
  Purple,
  Pink,
  Brown,
  Black,
  White,
  Gray,
  Silver as SilverIcon,
  Gold as GoldIcon,
  Bronze as BronzeIcon,
  Copper,
  Platinum as PlatinumIcon,
  Diamond as DiamondIcon3,
  Ruby as RubyIcon,
  Emerald as EmeraldIcon,
  Sapphire as SapphireIcon,
  Pearl as PearlIcon,
  Crystal as CrystalIcon,
  Metal,
  Iron,
  Steel,
  Aluminum,
  Titanium,
  Chrome,
  Brass,
  Bronze as BronzeIcon2,
  Tin,
  Lead,
  Zinc,
  Nickel,
  Cobalt,
  Lithium,
  Sodium,
  Potassium,
  Calcium,
  Magnesium,
  Silicon,
  Phosphorus,
  Sulfur,
  Chlorine,
  Argon,
  Scandium,
  Vanadium,
  Chromium,
  Manganese,
  Iron as IronIcon,
  Cobalt as CobaltIcon,
  Nickel as NickelIcon,
  Copper as CopperIcon,
  Zinc as ZincIcon,
  Gallium,
  Germanium,
  Arsenic,
  Selenium,
  Bromine,
  Krypton,
  Rubidium,
  Strontium,
  Yttrium,
  Zirconium,
  Niobium,
  Molybdenum,
  Technetium,
  Ruthenium,
  Rhodium,
  Palladium,
  Silver as SilverIcon2,
  Cadmium,
  Indium,
  Tin as TinIcon,
  Antimony,
  Tellurium,
  Iodine,
  Xenon,
  Cesium,
  Barium,
  Lanthanum,
  Cerium,
  Praseodymium,
  Neodymium,
  Promethium,
  Samarium,
  Europium,
  Gadolinium,
  Terbium,
  Dysprosium,
  Holmium,
  Erbium,
  Thulium,
  Ytterbium,
  Lutetium,
  Hafnium,
  Tantalum,
  Tungsten,
  Rhenium,
  Osmium,
  Iridium,
  Platinum as PlatinumIcon2,
  Gold as GoldIcon2,
  Mercury,
  Thallium,
  Lead as LeadIcon,
  Bismuth,
  Polonium,
  Astatine,
  Radon,
  Francium,
  Radium,
  Actinium,
  Thorium,
  Protactinium,
  Uranium,
  Neptunium,
  Plutonium,
  Americium,
  Curium,
  Berkelium,
  Californium,
  Einsteinium,
  Fermium,
  Mendelevium,
  Nobelium,
  Lawrencium,
  Rutherfordium,
  Dubnium,
  Seaborgium,
  Bohrium,
  Hassium,
  Meitnerium,
  Darmstadtium,
  Roentgenium,
  Copernicium,
  Nihonium,
  Flerovium,
  Moscovium,
  Livermorium,
  Tennessine,
  Oganesson
} from 'lucide-react';

interface SocialFeedProps {
  serverId: string;
  serverName: string;
  currentUserId: string;
  userRole: 'owner' | 'admin' | 'moderator' | 'member';
  filters?: {
    postType?: 'all' | 'text' | 'image' | 'video' | 'poll' | 'achievement';
    timeframe?: '24h' | '7d' | '30d' | 'all';
    author?: string;
  };
}

interface PostInteraction {
  postId: string;
  hasLiked: boolean;
  hasShared: boolean;
  hasBookmarked: boolean;
}

export default function SocialFeed({ 
  serverId, 
  serverName, 
  currentUserId, 
  userRole,
  filters = {} 
}: SocialFeedProps) {
  const [posts, setPosts] = useState<CommunityPost[]>([]);
  const [activityFeed, setActivityFeed] = useState<ActivityFeedItem[]>([]);
  const [interactions, setInteractions] = useState<Map<string, PostInteraction>>(new Map());
  const [loading, setLoading] = useState(true);
  const [showCreatePost, setShowCreatePost] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState<'all' | 'trending' | 'recent' | 'popular'>('recent');
  const [newPostContent, setNewPostContent] = useState('');
  const [newPostType, setNewPostType] = useState<'text' | 'image' | 'video' | 'poll'>('text');
  const [pollOptions, setPollOptions] = useState<string[]>(['', '']);
  const [showComments, setShowComments] = useState<Set<string>>(new Set());
  const [newComment, setNewComment] = useState<Map<string, string>>(new Map());
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    loadSocialFeed();
    const interval = setInterval(loadSocialFeed, 30000); // Update every 30 seconds
    return () => clearInterval(interval);
  }, [serverId, filters]);

  const loadSocialFeed = async () => {
    setLoading(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 800));
    
    // Mock posts data
    const mockPosts: CommunityPost[] = [
      {
        id: 'post-1',
        authorId: 'user-1',
        serverId: serverId,
        content: 'Just finished building an incredible underground city complete with railways, shops, and residential districts! This took me 3 weeks of planning and building. The attention to detail in the medieval architecture is something I\'m really proud of. What do you think? 🏰✨',
        mediaUrls: ['/api/placeholder/600/400', '/api/placeholder/600/400', '/api/placeholder/600/400'],
        postType: 'image',
        visibility: 'public',
        tags: ['building', 'underground', 'medieval', 'city', 'architecture'],
        likes: { count: 127, userHasLiked: false },
        comments: { count: 24, recent: [] },
        shares: { count: 18, userHasShared: false },
        author: {
          id: 'user-1',
          userId: 'user-1',
          displayName: 'BuildMaster_Pro',
          avatarUrl: '/api/placeholder/40/40',
          bannerUrl: '/api/placeholder/400/200',
          location: 'Canada',
          socialLinks: {},
          stats: {
            totalPlayTime: 89450,
            serversJoined: 5,
            friendsCount: 34,
            postsCount: 156,
            achievementsCount: 45,
            reputationScore: 654
          },
          preferences: {
            showOnlineStatus: true,
            allowFriendRequests: true,
            showGameActivity: true,
            emailNotifications: true,
            pushNotifications: true
          },
          badges: [
            {
              id: 'badge-master',
              name: 'Master Builder',
              description: 'Built 100+ amazing structures',
              iconUrl: '/api/placeholder/32/32',
              category: 'achievement',
              rarity: 'legendary',
              earnedAt: new Date('2024-01-15')
            }
          ],
          joinedAt: new Date('2023-11-10'),
          lastActive: new Date(Date.now() - 15 * 60 * 1000)
        },
        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
        updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000)
      },
      {
        id: 'post-2',
        authorId: 'user-2',
        serverId: serverId,
        content: 'Who\'s ready for this weekend\'s PvP tournament? 🏆 Registration closes tomorrow at midnight! First place gets 1000 server credits, custom title, and a legendary weapon skin. Let\'s see who\'s the ultimate warrior! May the best player win! ⚔️',
        mediaUrls: [],
        postType: 'text',
        visibility: 'public',
        tags: ['pvp', 'tournament', 'competition', 'weekend', 'prizes'],
        likes: { count: 89, userHasLiked: true },
        comments: { count: 32, recent: [] },
        shares: { count: 25, userHasShared: false },
        author: {
          id: 'user-2',
          userId: 'user-2',
          displayName: 'PvP_Champion',
          avatarUrl: '/api/placeholder/40/40',
          bannerUrl: '/api/placeholder/400/200',
          location: 'USA',
          socialLinks: {},
          stats: {
            totalPlayTime: 156780,
            serversJoined: 8,
            friendsCount: 67,
            postsCount: 89,
            achievementsCount: 78,
            reputationScore: 1023
          },
          preferences: {
            showOnlineStatus: true,
            allowFriendRequests: true,
            showGameActivity: true,
            emailNotifications: true,
            pushNotifications: true
          },
          badges: [],
          joinedAt: new Date('2023-09-05'),
          lastActive: new Date(Date.now() - 30 * 60 * 1000)
        },
        createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000),
        updatedAt: new Date(Date.now() - 4 * 60 * 60 * 1000)
      },
      {
        id: 'post-3',
        authorId: 'user-3',
        serverId: serverId,
        content: 'What should we build next for our community project?',
        mediaUrls: [],
        postType: 'poll',
        visibility: 'public',
        tags: ['community', 'building', 'vote', 'project'],
        likes: { count: 45, userHasLiked: false },
        comments: { count: 12, recent: [] },
        shares: { count: 8, userHasShared: false },
        poll: {
          question: 'What should we build next for our community project?',
          options: [
            { id: 'opt-1', text: 'Massive Castle', votes: 23 },
            { id: 'opt-2', text: 'Modern City', votes: 18 },
            { id: 'opt-3', text: 'Space Station', votes: 31 },
            { id: 'opt-4', text: 'Underwater Base', votes: 15 }
          ],
          endsAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
          allowMultiple: false
        },
        author: {
          id: 'user-3',
          userId: 'user-3',
          displayName: 'CommunityBuilder',
          avatarUrl: '/api/placeholder/40/40',
          bannerUrl: '/api/placeholder/400/200',
          location: 'UK',
          socialLinks: {},
          stats: {
            totalPlayTime: 67230,
            serversJoined: 3,
            friendsCount: 28,
            postsCount: 67,
            achievementsCount: 34,
            reputationScore: 445
          },
          preferences: {
            showOnlineStatus: true,
            allowFriendRequests: true,
            showGameActivity: true,
            emailNotifications: true,
            pushNotifications: true
          },
          badges: [],
          joinedAt: new Date('2023-12-20'),
          lastActive: new Date(Date.now() - 10 * 60 * 1000)
        },
        createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000),
        updatedAt: new Date(Date.now() - 6 * 60 * 60 * 1000)
      },
      {
        id: 'post-4',
        authorId: 'user-4',
        serverId: serverId,
        content: 'Just earned the "Master Explorer" achievement! 🗺️ Finally visited all 50 unique biomes on the server. The journey was incredible - from the floating islands to the crystal caves. Each location had its own challenges and surprises. Huge thanks to everyone who gave me tips and directions!',
        mediaUrls: ['/api/placeholder/500/300'],
        postType: 'achievement',
        visibility: 'public',
        tags: ['achievement', 'exploration', 'biomes', 'adventure'],
        likes: { count: 156, userHasLiked: false },
        comments: { count: 28, recent: [] },
        shares: { count: 12, userHasShared: false },
        author: {
          id: 'user-4',
          userId: 'user-4',
          displayName: 'Explorer_Alex',
          avatarUrl: '/api/placeholder/40/40',
          bannerUrl: '/api/placeholder/400/200',
          location: 'Australia',
          socialLinks: {},
          stats: {
            totalPlayTime: 123450,
            serversJoined: 15,
            friendsCount: 89,
            postsCount: 234,
            achievementsCount: 156,
            reputationScore: 789
          },
          preferences: {
            showOnlineStatus: true,
            allowFriendRequests: true,
            showGameActivity: true,
            emailNotifications: true,
            pushNotifications: true
          },
          badges: [
            {
              id: 'badge-explorer',
              name: 'Master Explorer',
              description: 'Visited all unique biomes',
              iconUrl: '/api/placeholder/32/32',
              category: 'achievement',
              rarity: 'epic',
              earnedAt: new Date()
            }
          ],
          joinedAt: new Date('2023-10-15'),
          lastActive: new Date(Date.now() - 5 * 60 * 1000)
        },
        createdAt: new Date(Date.now() - 8 * 60 * 60 * 1000),
        updatedAt: new Date(Date.now() - 8 * 60 * 60 * 1000)
      },
      {
        id: 'post-5',
        authorId: currentUserId,
        serverId: serverId,
        content: 'New server rules update! 📋 We\'ve added some new guidelines to ensure everyone has a great experience. Please take a moment to review them in the #rules channel. The main additions focus on respectful communication and fair play. Questions? Feel free to ask any moderator!',
        mediaUrls: [],
        postType: 'text',
        visibility: 'public',
        tags: ['announcement', 'rules', 'moderation', 'community'],
        likes: { count: 67, userHasLiked: false },
        comments: { count: 15, recent: [] },
        shares: { count: 22, userHasShared: false },
        author: {
          id: currentUserId,
          userId: currentUserId,
          displayName: 'Alex Johnson',
          avatarUrl: '/api/placeholder/40/40',
          bannerUrl: '/api/placeholder/400/200',
          location: 'Seattle, WA',
          socialLinks: {},
          stats: {
            totalPlayTime: 145680,
            serversJoined: 12,
            friendsCount: 48,
            postsCount: 234,
            achievementsCount: 67,
            reputationScore: 892
          },
          preferences: {
            showOnlineStatus: true,
            allowFriendRequests: true,
            showGameActivity: true,
            emailNotifications: true,
            pushNotifications: true
          },
          badges: [],
          joinedAt: new Date('2023-08-15'),
          lastActive: new Date()
        },
        createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000),
        updatedAt: new Date(Date.now() - 12 * 60 * 60 * 1000)
      }
    ];

    // Mock activity feed
    const mockActivityFeed: ActivityFeedItem[] = [
      {
        id: 'activity-1',
        userId: 'user-4',
        activityType: 'achievement',
        title: 'Explorer_Alex earned Master Explorer',
        description: 'Visited all 50 unique biomes on the server',
        metadata: { achievementId: 'master-explorer' },
        visibility: 'public',
        imageUrl: '/api/placeholder/32/32',
        createdAt: new Date(Date.now() - 30 * 60 * 1000)
      },
      {
        id: 'activity-2',
        userId: 'user-5',
        activityType: 'server_join',
        title: 'NewPlayer_Sarah joined the server',
        description: 'Welcome to our amazing community!',
        metadata: { serverId: serverId },
        visibility: 'public',
        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000)
      },
      {
        id: 'activity-3',
        userId: 'user-2',
        activityType: 'tournament_win',
        title: 'PvP_Champion won the weekly tournament',
        description: 'Defeated 15 opponents in epic battles',
        metadata: { eventId: 'tournament-1' },
        visibility: 'public',
        createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000)
      }
    ];

    setPosts(mockPosts);
    setActivityFeed(mockActivityFeed);
    
    // Initialize interactions
    const newInteractions = new Map<string, PostInteraction>();
    mockPosts.forEach(post => {
      newInteractions.set(post.id, {
        postId: post.id,
        hasLiked: post.likes.userHasLiked,
        hasShared: post.shares.userHasShared,
        hasBookmarked: false
      });
    });
    setInteractions(newInteractions);
    
    setLoading(false);
  };

  const handleCreatePost = async () => {
    if (!newPostContent.trim()) return;

    const newPost: CommunityPost = {
      id: `post-${Date.now()}`,
      authorId: currentUserId,
      serverId: serverId,
      content: newPostContent,
      mediaUrls: [],
      postType: newPostType,
      visibility: 'public',
      tags: [],
      likes: { count: 0, userHasLiked: false },
      comments: { count: 0, recent: [] },
      shares: { count: 0, userHasShared: false },
      poll: newPostType === 'poll' ? {
        question: newPostContent,
        options: pollOptions.filter(opt => opt.trim()).map((opt, index) => ({
          id: `opt-${index}`,
          text: opt,
          votes: 0
        })),
        endsAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
        allowMultiple: false
      } : undefined,
      author: posts.find(p => p.authorId === currentUserId)?.author,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    setPosts(prev => [newPost, ...prev]);
    setInteractions(prev => new Map(prev.set(newPost.id, {
      postId: newPost.id,
      hasLiked: false,
      hasShared: false,
      hasBookmarked: false
    })));
    
    setNewPostContent('');
    setPollOptions(['', '']);
    setShowCreatePost(false);
  };

  const handleLikePost = (postId: string) => {
    setPosts(prev => prev.map(post => 
      post.id === postId 
        ? {
            ...post,
            likes: {
              count: post.likes.userHasLiked ? post.likes.count - 1 : post.likes.count + 1,
              userHasLiked: !post.likes.userHasLiked
            }
          }
        : post
    ));

    setInteractions(prev => {
      const current = prev.get(postId);
      if (current) {
        return new Map(prev.set(postId, {
          ...current,
          hasLiked: !current.hasLiked
        }));
      }
      return prev;
    });
  };

  const handleSharePost = (postId: string) => {
    setPosts(prev => prev.map(post => 
      post.id === postId 
        ? {
            ...post,
            shares: {
              count: post.shares.userHasShared ? post.shares.count - 1 : post.shares.count + 1,
              userHasShared: !post.shares.userHasShared
            }
          }
        : post
    ));

    setInteractions(prev => {
      const current = prev.get(postId);
      if (current) {
        return new Map(prev.set(postId, {
          ...current,
          hasShared: !current.hasShared
        }));
      }
      return prev;
    });
  };

  const toggleComments = (postId: string) => {
    setShowComments(prev => {
      const newSet = new Set(prev);
      if (newSet.has(postId)) {
        newSet.delete(postId);
      } else {
        newSet.add(postId);
      }
      return newSet;
    });
  };

  const handleAddComment = (postId: string) => {
    const comment = newComment.get(postId);
    if (!comment?.trim()) return;

    console.log(`Adding comment to post ${postId}: ${comment}`);
    
    // Update comment count
    setPosts(prev => prev.map(post => 
      post.id === postId 
        ? { ...post, comments: { ...post.comments, count: post.comments.count + 1 } }
        : post
    ));

    // Clear comment input
    setNewComment(prev => {
      const newMap = new Map(prev);
      newMap.delete(postId);
      return newMap;
    });
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    return `${days}d ago`;
  };

  const getPostTypeIcon = (postType: string) => {
    switch (postType) {
      case 'image': return <Camera className="w-4 h-4" />;
      case 'video': return <Video className="w-4 h-4" />;
      case 'poll': return <BarChart3 className="w-4 h-4" />;
      case 'achievement': return <Trophy className="w-4 h-4" />;
      default: return <FileText className="w-4 h-4" />;
    }
  };

  const filteredPosts = posts.filter(post => {
    if (searchQuery) {
      return post.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
             post.author?.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||
             post.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    }
    return true;
  });

  const sortedPosts = [...filteredPosts].sort((a, b) => {
    switch (selectedFilter) {
      case 'trending':
        return (b.likes.count + b.comments.count + b.shares.count) - (a.likes.count + a.comments.count + a.shares.count);
      case 'popular':
        return b.likes.count - a.likes.count;
      case 'recent':
      default:
        return b.createdAt.getTime() - a.createdAt.getTime();
    }
  });

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <RefreshCw className="w-8 h-8 animate-spin text-indigo-600" />
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
              <MessageCircle className="w-6 h-6 text-indigo-600" />
              Social Feed
            </h1>
            <p className="text-gray-600">{serverName} community updates and discussions</p>
          </div>
          <button
            onClick={() => setShowCreatePost(true)}
            className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            <Plus className="w-4 h-4" />
            Create Post
          </button>
        </div>

        {/* Filters and Search */}
        <div className="flex items-center gap-4 mb-4">
          <div className="flex-1 relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search posts, users, or tags..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
          <div className="flex gap-1 bg-white p-1 rounded-lg border">
            {[
              { id: 'recent', label: 'Recent', icon: Clock },
              { id: 'trending', label: 'Trending', icon: TrendingUp },
              { id: 'popular', label: 'Popular', icon: Heart }
            ].map((filter) => (
              <button
                key={filter.id}
                onClick={() => setSelectedFilter(filter.id as any)}
                className={`flex items-center gap-2 px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                  selectedFilter === filter.id
                    ? 'bg-indigo-600 text-white'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
              >
                <filter.icon className="w-4 h-4" />
                {filter.label}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Create Post Modal */}
      {showCreatePost && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-900">Create Post</h2>
                <button
                  onClick={() => setShowCreatePost(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-4">
                {/* Post Type Selection */}
                <div className="flex gap-2">
                  {[
                    { id: 'text', label: 'Text', icon: FileText },
                    { id: 'image', label: 'Photo', icon: Camera },
                    { id: 'video', label: 'Video', icon: Video },
                    { id: 'poll', label: 'Poll', icon: BarChart3 }
                  ].map((type) => (
                    <button
                      key={type.id}
                      onClick={() => setNewPostType(type.id as any)}
                      className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                        newPostType === type.id
                          ? 'bg-indigo-600 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      <type.icon className="w-4 h-4" />
                      {type.label}
                    </button>
                  ))}
                </div>

                {/* Content Input */}
                <textarea
                  value={newPostContent}
                  onChange={(e) => setNewPostContent(e.target.value)}
                  placeholder={newPostType === 'poll' ? "What would you like to ask?" : "What's on your mind?"}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 resize-none"
                  rows={4}
                />

                {/* Poll Options */}
                {newPostType === 'poll' && (
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">Poll Options</label>
                    {pollOptions.map((option, index) => (
                      <input
                        key={index}
                        type="text"
                        value={option}
                        onChange={(e) => {
                          const newOptions = [...pollOptions];
                          newOptions[index] = e.target.value;
                          setPollOptions(newOptions);
                        }}
                        placeholder={`Option ${index + 1}`}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                      />
                    ))}
                    {pollOptions.length < 4 && (
                      <button
                        onClick={() => setPollOptions([...pollOptions, ''])}
                        className="flex items-center gap-2 px-3 py-1 text-sm text-indigo-600 hover:bg-indigo-50 rounded"
                      >
                        <Plus className="w-4 h-4" />
                        Add Option
                      </button>
                    )}
                  </div>
                )}

                {/* Media Upload Buttons */}
                {(newPostType === 'image' || newPostType === 'video') && (
                  <div className="flex gap-2">
                    <button className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
                      <Upload className="w-4 h-4" />
                      Upload {newPostType === 'image' ? 'Images' : 'Video'}
                    </button>
                  </div>
                )}
              </div>

              <div className="flex justify-end gap-3 mt-6">
                <button
                  onClick={() => setShowCreatePost(false)}
                  className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200"
                >
                  Cancel
                </button>
                <button
                  onClick={handleCreatePost}
                  className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50"
                  disabled={!newPostContent.trim() || (newPostType === 'poll' && pollOptions.filter(opt => opt.trim()).length < 2)}
                >
                  Post
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Posts Feed */}
      <div className="space-y-6">
        {sortedPosts.map((post) => (
          <div key={post.id} className="bg-white rounded-xl shadow-sm border p-6">
            {/* Post Header */}
            <div className="flex items-start gap-3 mb-4">
              {post.author?.avatarUrl && (
                <img 
                  src={post.author.avatarUrl} 
                  alt={post.author.displayName}
                  className="w-12 h-12 rounded-full"
                />
              )}
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <span className="font-semibold text-gray-900">{post.author?.displayName}</span>
                  {post.author?.badges.some(b => b.category === 'special') && (
                    <Crown className="w-4 h-4 text-yellow-500" />
                  )}
                  <span className="text-gray-500">•</span>
                  <span className="text-sm text-gray-500">{formatTimeAgo(post.createdAt)}</span>
                  <div className="flex items-center gap-1">
                    {getPostTypeIcon(post.postType)}
                    <span className="text-xs text-gray-500 capitalize">{post.postType}</span>
                  </div>
                </div>
                {post.author?.location && (
                  <div className="flex items-center gap-1 text-xs text-gray-500">
                    <MapPin className="w-3 h-3" />
                    {post.author.location}
                  </div>
                )}
              </div>
              <button className="p-1 text-gray-400 hover:text-gray-600">
                <MoreHorizontal className="w-4 h-4" />
              </button>
            </div>

            {/* Post Content */}
            <div className="mb-4">
              <p className="text-gray-700 whitespace-pre-wrap">{post.content}</p>
              
              {/* Tags */}
              {post.tags.length > 0 && (
                <div className="flex flex-wrap gap-1 mt-3">
                  {post.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-indigo-100 text-indigo-700 rounded-full text-xs cursor-pointer hover:bg-indigo-200"
                    >
                      #{tag}
                    </span>
                  ))}
                </div>
              )}

              {/* Media */}
              {post.mediaUrls.length > 0 && (
                <div className={`grid gap-2 mt-4 ${
                  post.mediaUrls.length === 1 ? 'grid-cols-1' :
                  post.mediaUrls.length === 2 ? 'grid-cols-2' :
                  'grid-cols-2 md:grid-cols-3'
                }`}>
                  {post.mediaUrls.map((url, index) => (
                    <img
                      key={index}
                      src={url}
                      alt={`Post media ${index + 1}`}
                      className="w-full h-48 object-cover rounded-lg cursor-pointer hover:opacity-90"
                    />
                  ))}
                </div>
              )}

              {/* Poll */}
              {post.poll && (
                <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                  <h4 className="font-medium text-gray-900 mb-3">{post.poll.question}</h4>
                  <div className="space-y-2">
                    {post.poll.options.map((option) => {
                      const totalVotes = post.poll!.options.reduce((sum, opt) => sum + opt.votes, 0);
                      const percentage = totalVotes > 0 ? (option.votes / totalVotes) * 100 : 0;
                      
                      return (
                        <div key={option.id} className="cursor-pointer hover:bg-gray-100 p-2 rounded">
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-sm font-medium text-gray-900">{option.text}</span>
                            <span className="text-xs text-gray-500">{option.votes} votes</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-indigo-600 h-2 rounded-full transition-all duration-300"
                              style={{ width: `${percentage}%` }}
                            ></div>
                          </div>
                          <div className="text-xs text-gray-500 mt-1">{percentage.toFixed(1)}%</div>
                        </div>
                      );
                    })}
                  </div>
                  <div className="text-xs text-gray-500 mt-3">
                    Poll ends {post.poll.endsAt.toLocaleDateString()} at {post.poll.endsAt.toLocaleTimeString()}
                  </div>
                </div>
              )}
            </div>

            {/* Post Actions */}
            <div className="flex items-center justify-between pt-3 border-t">
              <div className="flex items-center gap-1">
                <button
                  onClick={() => handleLikePost(post.id)}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm transition-colors ${
                    interactions.get(post.id)?.hasLiked
                      ? 'text-red-600 bg-red-50 hover:bg-red-100'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <Heart className={`w-4 h-4 ${interactions.get(post.id)?.hasLiked ? 'fill-current' : ''}`} />
                  {post.likes.count}
                </button>
                <button
                  onClick={() => toggleComments(post.id)}
                  className="flex items-center gap-2 px-3 py-2 rounded-lg text-sm text-gray-600 hover:bg-gray-100"
                >
                  <MessageCircle className="w-4 h-4" />
                  {post.comments.count}
                </button>
                <button
                  onClick={() => handleSharePost(post.id)}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm transition-colors ${
                    interactions.get(post.id)?.hasShared
                      ? 'text-green-600 bg-green-50 hover:bg-green-100'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <Share2 className="w-4 h-4" />
                  {post.shares.count}
                </button>
              </div>
              <div className="flex items-center gap-1">
                <button className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded">
                  <Bookmark className="w-4 h-4" />
                </button>
                <button className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded">
                  <Share2 className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Comments Section */}
            {showComments.has(post.id) && (
              <div className="mt-4 pt-4 border-t">
                <div className="flex gap-3">
                  <img 
                    src="/api/placeholder/32/32" 
                    alt="Your avatar"
                    className="w-8 h-8 rounded-full"
                  />
                  <div className="flex-1 flex gap-2">
                    <input
                      type="text"
                      placeholder="Write a comment..."
                      value={newComment.get(post.id) || ''}
                      onChange={(e) => setNewComment(prev => new Map(prev.set(post.id, e.target.value)))}
                      onKeyPress={(e) => e.key === 'Enter' && handleAddComment(post.id)}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    />
                    <button
                      onClick={() => handleAddComment(post.id)}
                      className="px-3 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50"
                      disabled={!newComment.get(post.id)?.trim()}
                    >
                      <Send className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                {post.comments.count > 0 && (
                  <div className="mt-3 space-y-3">
                    <div className="text-sm text-gray-500 text-center">
                      Comments will load here...
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        ))}

        {sortedPosts.length === 0 && (
          <div className="text-center py-12">
            <MessageCircle className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 mb-2">No posts found</h3>
            <p className="text-gray-600">
              {searchQuery ? 'Try adjusting your search terms' : 'Be the first to share something with the community!'}
            </p>
            {!searchQuery && (
              <button
                onClick={() => setShowCreatePost(true)}
                className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
              >
                Create First Post
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
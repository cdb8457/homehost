const React = require('react');\nconst { useState, useEffect, useCallback } = React;\nconst signalRClient = require('../services/SignalRClient');\nconst './RealTimeMonitor.css';\n\n/**\n * RealTimeMonitor Component - Real-time server and system monitoring\n * \n * Displays live server status, metrics, and system information with\n * real-time updates via SignalR connection.\n */\nfunction RealTimeMonitor() {\n  const [connectionStatus, setConnectionStatus] = useState({\n    isConnected: false,\n    isAuthenticated: false,\n    connectionAttempts: 0\n  });\n  const [serverStatus, setServerStatus] = useState({\n    servers: [],\n    systemInfo: {},\n    timestamp: null\n  });\n  const [metrics, setMetrics] = useState({});\n  const [logs, setLogs] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [selectedServerId, setSelectedServerId] = useState(null);\n\n  // Initialize SignalR connection\n  useEffect(() => {\n    const initializeConnection = async () => {\n      try {\n        console.log('🚀 Initializing real-time monitor...');\n        await signalRClient.initialize();\n        setIsInitialized(true);\n      } catch (error) {\n        console.error('❌ Failed to initialize SignalR connection:', error);\n      }\n    };\n\n    initializeConnection();\n\n    return () => {\n      signalRClient.destroy();\n    };\n  }, []);\n\n  // Set up event listeners\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    const handleConnectionStatus = () => {\n      setConnectionStatus(signalRClient.getConnectionStatus());\n    };\n\n    const handleServerStatusUpdate = (data) => {\n      console.log('📊 Server status update:', data);\n      setServerStatus(data);\n    };\n\n    const handleServerMetricsUpdate = (data) => {\n      console.log('📈 Metrics update:', data);\n      setMetrics(prev => ({\n        ...prev,\n        [data.serverId]: data.metrics\n      }));\n    };\n\n    const handlePerformanceAlert = (data) => {\n      console.log('⚠️ Performance alert:', data);\n      setAlerts(prev => [\n        {\n          id: `alert-${Date.now()}`,\n          serverId: data.serverId,\n          type: 'performance',\n          message: data.alert.message || 'Performance issue detected',\n          severity: data.alert.severity || 'warning',\n          timestamp: new Date(data.timestamp)\n        },\n        ...prev.slice(0, 19) // Keep last 20 alerts\n      ]);\n    };\n\n    const handleServerLog = (data) => {\n      console.log('📜 Server log:', data);\n      setLogs(prev => [\n        {\n          id: `log-${Date.now()}`,\n          serverId: data.serverId,\n          message: data.log.message || data.log,\n          level: data.log.level || 'info',\n          timestamp: new Date(data.timestamp)\n        },\n        ...prev.slice(0, 99) // Keep last 100 logs\n      ]);\n    };\n\n    const handleConnectionError = (error) => {\n      console.error('🔌 Connection error:', error);\n      setConnectionStatus(signalRClient.getConnectionStatus());\n    };\n\n    const handleDisconnected = (reason) => {\n      console.log('🔌 Disconnected:', reason);\n      setConnectionStatus(signalRClient.getConnectionStatus());\n    };\n\n    const handleAuthenticated = (data) => {\n      console.log('🔐 Authenticated:', data);\n      setConnectionStatus(signalRClient.getConnectionStatus());\n      \n      // Request initial server status\n      signalRClient.requestServerStatus();\n    };\n\n    // Add event listeners\n    signalRClient.on('connected', handleConnectionStatus);\n    signalRClient.on('authenticated', handleAuthenticated);\n    signalRClient.on('disconnected', handleDisconnected);\n    signalRClient.on('connection-error', handleConnectionError);\n    signalRClient.on('server-status-update', handleServerStatusUpdate);\n    signalRClient.on('server-metrics-update', handleServerMetricsUpdate);\n    signalRClient.on('performance-alert', handlePerformanceAlert);\n    signalRClient.on('server-log', handleServerLog);\n\n    // Initial status update\n    handleConnectionStatus();\n\n    return () => {\n      // Remove event listeners\n      signalRClient.removeListener('connected', handleConnectionStatus);\n      signalRClient.removeListener('authenticated', handleAuthenticated);\n      signalRClient.removeListener('disconnected', handleDisconnected);\n      signalRClient.removeListener('connection-error', handleConnectionError);\n      signalRClient.removeListener('server-status-update', handleServerStatusUpdate);\n      signalRClient.removeListener('server-metrics-update', handleServerMetricsUpdate);\n      signalRClient.removeListener('performance-alert', handlePerformanceAlert);\n      signalRClient.removeListener('server-log', handleServerLog);\n    };\n  }, [isInitialized]);\n\n  // Subscribe to logs for selected server\n  useEffect(() => {\n    if (selectedServerId && connectionStatus.isAuthenticated) {\n      signalRClient.subscribeToServerLogs(selectedServerId);\n      \n      return () => {\n        signalRClient.unsubscribeFromServerLogs(selectedServerId);\n      };\n    }\n  }, [selectedServerId, connectionStatus.isAuthenticated]);\n\n  const handleServerCommand = useCallback(async (command, serverId, params) => {\n    try {\n      console.log(`🔧 Sending command: ${command} to server ${serverId}`);\n      const response = await signalRClient.sendServerCommand(command, serverId, params);\n      console.log('✅ Command response:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ Command failed:', error);\n      throw error;\n    }\n  }, []);\n\n  const getConnectionStatusColor = () => {\n    if (!connectionStatus.isConnected) return 'status-disconnected';\n    if (!connectionStatus.isAuthenticated) return 'status-connecting';\n    return 'status-connected';\n  };\n\n  const getConnectionStatusText = () => {\n    if (!connectionStatus.isConnected) return 'Disconnected';\n    if (!connectionStatus.isAuthenticated) return 'Connecting...';\n    return 'Connected';\n  };\n\n  const formatUptime = (uptime) => {\n    const seconds = Math.floor(uptime / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  };\n\n  const formatTimestamp = (timestamp) => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n\n  const getServerStatusColor = (server) => {\n    switch (server.status) {\n      case 'running': return 'server-running';\n      case 'stopped': return 'server-stopped';\n      case 'starting': return 'server-starting';\n      case 'stopping': return 'server-stopping';\n      case 'error': return 'server-error';\n      default: return 'server-unknown';\n    }\n  };\n\n  const getAlertColor = (severity) => {\n    switch (severity) {\n      case 'critical': return 'alert-critical';\n      case 'warning': return 'alert-warning';\n      case 'info': return 'alert-info';\n      default: return 'alert-info';\n    }\n  };\n\n  const getLogLevelColor = (level) => {\n    switch (level) {\n      case 'error': return 'log-error';\n      case 'warn': return 'log-warn';\n      case 'info': return 'log-info';\n      case 'debug': return 'log-debug';\n      default: return 'log-info';\n    }\n  };\n\n  if (!isInitialized) {\n    return (\n      <div className=\"real-time-monitor loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Initializing real-time connection...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"real-time-monitor\">\n      {/* Connection Status Header */}\n      <div className=\"connection-status-header\">\n        <div className=\"connection-indicator\">\n          <div className={`status-dot ${getConnectionStatusColor()}`}></div>\n          <span className=\"status-text\">{getConnectionStatusText()}</span>\n          {connectionStatus.isConnected && (\n            <span className=\"connection-info\">\n              Uptime: {formatUptime(connectionStatus.uptime || 0)}\n              {connectionStatus.metrics?.averageLatency && (\n                <> • Latency: {Math.round(connectionStatus.metrics.averageLatency)}ms</>\n              )}\n            </span>\n          )}\n        </div>\n        \n        {connectionStatus.connectionAttempts > 0 && !connectionStatus.isConnected && (\n          <div className=\"reconnection-info\">\n            Reconnection attempt {connectionStatus.connectionAttempts}\n          </div>\n        )}\n      </div>\n\n      {/* Server Status Dashboard */}\n      <div className=\"server-status-section\">\n        <h3>Server Status</h3>\n        \n        {serverStatus.servers.length === 0 ? (\n          <div className=\"no-servers\">\n            <p>No servers detected</p>\n          </div>\n        ) : (\n          <div className=\"server-grid\">\n            {serverStatus.servers.map((server) => (\n              <div \n                key={server.id} \n                className={`server-card ${getServerStatusColor(server)}`}\n                onClick={() => setSelectedServerId(server.id)}\n              >\n                <div className=\"server-header\">\n                  <h4>{server.name}</h4>\n                  <span className=\"server-status\">{server.status}</span>\n                </div>\n                \n                <div className=\"server-info\">\n                  <div className=\"server-game\">{server.gameName || server.gameType}</div>\n                  <div className=\"server-players\">\n                    {server.currentPlayers || 0}/{server.maxPlayers || 0} players\n                  </div>\n                  <div className=\"server-port\">Port: {server.port}</div>\n                </div>\n                \n                {metrics[server.id] && (\n                  <div className=\"server-metrics\">\n                    <div className=\"metric\">\n                      CPU: {Math.round(metrics[server.id].cpu || 0)}%\n                    </div>\n                    <div className=\"metric\">\n                      RAM: {Math.round(metrics[server.id].memory || 0)}%\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"server-actions\">\n                  {server.status === 'stopped' && (\n                    <button \n                      className=\"action-btn start\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleServerCommand('start-server', server.id);\n                      }}\n                    >\n                      Start\n                    </button>\n                  )}\n                  {server.status === 'running' && (\n                    <button \n                      className=\"action-btn stop\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleServerCommand('stop-server', server.id);\n                      }}\n                    >\n                      Stop\n                    </button>\n                  )}\n                  <button \n                    className=\"action-btn logs\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setSelectedServerId(server.id);\n                    }}\n                  >\n                    Logs\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* System Information */}\n      {serverStatus.systemInfo && Object.keys(serverStatus.systemInfo).length > 0 && (\n        <div className=\"system-info-section\">\n          <h3>System Information</h3>\n          <div className=\"system-metrics\">\n            {serverStatus.systemInfo.cpu && (\n              <div className=\"metric-card\">\n                <h4>CPU Usage</h4>\n                <div className=\"metric-value\">{Math.round(serverStatus.systemInfo.cpu.usage || 0)}%</div>\n              </div>\n            )}\n            {serverStatus.systemInfo.memory && (\n              <div className=\"metric-card\">\n                <h4>Memory Usage</h4>\n                <div className=\"metric-value\">\n                  {Math.round((serverStatus.systemInfo.memory.used / serverStatus.systemInfo.memory.total) * 100 || 0)}%\n                </div>\n                <div className=\"metric-detail\">\n                  {Math.round((serverStatus.systemInfo.memory.used || 0) / 1024 / 1024 / 1024 * 10) / 10}GB / \n                  {Math.round((serverStatus.systemInfo.memory.total || 0) / 1024 / 1024 / 1024 * 10) / 10}GB\n                </div>\n              </div>\n            )}\n            <div className=\"metric-card\">\n              <h4>System Uptime</h4>\n              <div className=\"metric-value\">{formatUptime((serverStatus.systemInfo.uptime || 0) * 1000)}</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Performance Alerts */}\n      {alerts.length > 0 && (\n        <div className=\"alerts-section\">\n          <h3>Recent Alerts</h3>\n          <div className=\"alerts-list\">\n            {alerts.slice(0, 5).map((alert) => (\n              <div key={alert.id} className={`alert-item ${getAlertColor(alert.severity)}`}>\n                <div className=\"alert-header\">\n                  <span className=\"alert-type\">{alert.type}</span>\n                  <span className=\"alert-time\">{formatTimestamp(alert.timestamp)}</span>\n                </div>\n                <div className=\"alert-message\">{alert.message}</div>\n                {alert.serverId && (\n                  <div className=\"alert-server\">Server: {alert.serverId}</div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Real-time Logs */}\n      {selectedServerId && (\n        <div className=\"logs-section\">\n          <div className=\"logs-header\">\n            <h3>Server Logs - {selectedServerId}</h3>\n            <button \n              className=\"close-logs\"\n              onClick={() => setSelectedServerId(null)}\n            >\n              ×\n            </button>\n          </div>\n          \n          <div className=\"logs-container\">\n            {logs\n              .filter(log => !selectedServerId || log.serverId === selectedServerId)\n              .slice(0, 20)\n              .map((log) => (\n                <div key={log.id} className={`log-entry ${getLogLevelColor(log.level)}`}>\n                  <span className=\"log-time\">{formatTimestamp(log.timestamp)}</span>\n                  <span className=\"log-level\">[{log.level.toUpperCase()}]</span>\n                  <span className=\"log-message\">{log.message}</span>\n                </div>\n              ))\n            }\n            \n            {logs.filter(log => !selectedServerId || log.serverId === selectedServerId).length === 0 && (\n              <div className=\"no-logs\">\n                <p>No recent logs for this server</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Last Update Info */}\n      {serverStatus.timestamp && (\n        <div className=\"last-update\">\n          Last updated: {new Date(serverStatus.timestamp).toLocaleString()}\n        </div>\n      )}\n    </div>\n  );\n}\n\nmodule.exports = RealTimeMonitor;